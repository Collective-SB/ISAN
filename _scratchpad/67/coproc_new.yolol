id=1 z=1000 y=20 g=(id/y)/z*z of=75 s=45 u=(id%y-1)*2.25 x=1 w="12"     //setup
:IA*=++:IA<y a=:IA<1 :HA+=(:KA-:HA)*a :KA+=:AA<:SA-:KA*a goto2+:XA      //async hit counter     
:JA*=++:JA<y a=:JA<1 :MA+=(:KA-:MA)*a :KA+=(:AA-:KA)*((:AA<:KA+a)>0)    //minimum distance with reset
goto 2+:XA                                                              //==
:AAB=of+u :AAA=of+s*x k=:AAC==0 :AAS=k :AAV=10-9.98*k goto 5+k          //fanout :: relies on hinge initilally being :AAC!=0 (~ :AAS==1)
k=:AA<:SA a=x b=:AAC==1 c=1-k x-=b*x goto 6+b*(2-3*a)*c+2*:F*c+k        //scan
:F=1 :FID=id :FR=:AA :FG=g :FA=(:AAA-:AAB)*:AAC+:AAB :AAA=:FA           //on scan find
d=((w-g)!=w)*90 :AAA=d+(:FA-d)*(:FG==g) :AAS=:F :JA++ goto 19           //not found (either end of scan, or someone else found)
//--+----|----+----|----+----|----+----|----+----|----+----|----+----|








goto 19+(:JA>y)                                                         //waitloop
:JA=0 :IA=0 :XA=0 x=1 goto 2                                            //reset
//--+----|----+----|----+----|----+----|----+----|----+----|----+----|

//Paster directives
//#replacer id=1 --> "id="+chip
//#replacer :AA  --> ":" + alpha(2, chip-1)

//#replacer :AAA --> ":" + alpha(2, chip-1) + "A"
//#replacer :AAB --> ":" + alpha(2, chip-1) + "B"
//#replacer :AAC --> ":" + alpha(2, chip-1) + "C"
//#replacer :AAS --> ":" + alpha(2, chip-1) + "S"
//#replacer :AAV --> ":" + alpha(2, chip-1) + "V"

//#replacer :IA  --> ":I" + alpha(1, floor(chip/20))
//#replacer :JA  --> ":J" + alpha(1, floor(chip/20))
//#replacer :KA  --> ":K" + alpha(1, floor(chip/20))
//#replacer :HA  --> ":H" + alpha(1, floor(chip/20))
//#replacer :XA  --> ":X" + alpha(1, floor(chip/20))
//#replacer :SA  --> ":S" + alpha(1, floor(chip/20))

//#numchips 80