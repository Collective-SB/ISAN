dp=0.681 b=75 :AAB=0.1 :AAA=0.2 :AAS=0 :AAC=0 m="" j=""                     //setup
sa=m sb=m sc=m sd=m se=m sf=m goto 2+:XA                                    //default kernel (currently do nothing)
:A11A=j :A21A=j :A31A=j :A41A=j :A51A=j :A61A=j pa=j pb=j pc=j pd=j         //reset frame buffer segment
pe=j pf=j :AAB=b-dp :AAA=b :AAV=10 :AAS=1 px=0 a=0  goto 4+(:AAC==1)        //scan setup
:AAV=0.02 :AAB+=dp :AAA+=dp a=0 px++ goto 6+(px>66)                         //next px
h=:AA<:SA a+=h :AAV=0.02-0.019*h f=(px-1)/11 goto 6+(:AAC==1)*(8+a>30)      //px hit ctr
:XA=0 goto 2                                                                //scan done






s=" " if a>0  then s="." end if a>20 then s=":" end goto 16+f/2             //ascii selection  " ", ".", ":"
s="+" if a>40 then s="x" end if a>60 then s="X" end goto 16+f/2             //ascii selection  "+", "x", "X"           
if f<1 then :string1+=s else :A21A+=s end goto5                               //String output f=0, 1
if f<3 then :A31A+=s else :A41A+=s end goto5                               //String output f=2, 3
if f<5 then :A51A+=s else :A61A+=s end goto5                               //String output f=4, 5
//goto 19+(:JA>=20)                                                         //waitloop
//goto 2                                                                    //reset
//--+----|----+----|----+----|----+----|----+----|----+----|----+----|  

//XA calls
//      1: scan to frame buffer
if f<1 then sa=s+sa :A61A=--pa+sa else sb=s+sb :A51A=--pb+sb end goto5
//locals
// a - ascii sel
// f - string sel
// s - string append buffer
// h - hit?
// j - memreset val

// b  - scan start
// dp - degrees per pixel
// px - current px [0->65]
//

//--------------------------------------Paster directives
//(chip=1 -> 80)
//#numchips 80
//-------------------------------------------------------MAIN
////#replacer id=1 --> "id="+chip                                       //[INACTIVE] chip id
//#replacer :XA  --> ":X" + alpha(1, floor((chip-1)/20))                //Execution control
//#replacer b=75 --> "b=" + [75, 45, 45, 75][floor((chip-1)/20)]

//-------------------------------------------------------RF
//#replacer :AA  --> ":" + alpha(2, chip-1)                             //Distance

//-------------------------------------------------------RF_DOOR
////#replacer :AAA --> ":" + alpha(2, chip-1) + "A"                       //End angle
////#replacer :AAB --> ":" + alpha(2, chip-1) + "B"                       //Start angle
////#replacer :AAC --> ":" + alpha(2, chip-1) + "C"                       //door current state
////#replacer :AAS --> ":" + alpha(2, chip-1) + "S"                       //door state           (1=move to AAA, 0=move to AAB)
////#replacer :AAV --> ":" + alpha(2, chip-1) + "V"                       //door vel


//-------------------------------------------------------String order flip?

//#replacer j=""     --> ["j=\"\"", "j=\"\"","j=\"           \"","j=\"           \""][floor((chip-1)/20)]
//#replacer :A11A+=s --> [":A11A+=s", ":A11A+=s", "sa=s+sa :A61A=--pa+sa", "sa=s+sa :A61A=--pa+sa"][floor((chip-1)/20)]
//#replacer :A21A+=s --> [":A21A+=s", ":A21A+=s", "sb=s+sb :A51A=--pb+sb", "sb=s+sb :A51A=--pb+sb"][floor((chip-1)/20)]
//#replacer :A31A+=s --> [":A31A+=s", ":A31A+=s", "sc=s+sc :A41A=--pc+sc", "sc=s+sc :A41A=--pc+sc"][floor((chip-1)/20)]
//#replacer :A41A+=s --> [":A41A+=s", ":A41A+=s", "sd=s+sd :A31A=--pd+sd", "sd=s+sd :A31A=--pd+sd"][floor((chip-1)/20)]
//#replacer :A51A+=s --> [":A51A+=s", ":A51A+=s", "se=s+se :A21A=--pe+se", "se=s+se :A21A=--pe+se"][floor((chip-1)/20)]
//#replacer :A61A+=s --> [":A61A+=s", ":A61A+=s", "sf=s+sf :A11A=--pf+sf", "sf=s+sf :A11A=--pf+sf"][floor((chip-1)/20)]

//-------------------------------------------------------STRINGS    //incomplete
//#replacer :A11A --> ":"+dstring(1, chip)                              //String 1
//#replacer :A21A --> ":"+dstring(2, chip)                              //String 2
//#replacer :A31A --> ":"+dstring(3, chip)                              //String 3
//#replacer :A41A --> ":"+dstring(4, chip)                              //String 4
//#replacer :A51A --> ":"+dstring(5, chip)                              //String 5
//#replacer :A61A --> ":"+dstring(6, chip)                              //String 6





