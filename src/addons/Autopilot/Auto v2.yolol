sy=0 r=(r-:x+:i)/2 s=(s-:y+:j)/2 t=(t-:z+:k)/2 wa=20 wb=20                                                         //Space for initialisation
p=30 x=(x+:X*p)/2 y=(y+:Y*p)/2 z=(z+:Z*p)/2    wc=60 wd=60                      //last pitched| running average for LFT
goto1+3*:AUTO                                                                   //Wait for :AUTO=1
u=x v=y w=z x=0 y=0 z=0 r=0 s=0 t=0 p=30 :CTRM=p :CTR=0                         //store previous position & zero acc vector
x+=:X y+=:Y z+=:Z r-=:x-:i s-=:y-:j t-=:z-:k :CTR++ goto 5+(p--==0)             //accumulate POS & LFT(rough)
lg=g lh=h li=i g=x-u h=y-v i=z-w   p=sqrt(g*g+h*h+i*i) g/=p h/=p i/=p           //LDIR=DIR | DIR = POS-LPO     DIR/=|DIR|  (could output speed here?)
p=30 j=:DX-x/p k=:DY-y/p l=:DZ-z/p p=sqrt(j*j+k*k+l*l) j/=p k/=p l/=p           //DV=:D-DIR/:AUTOs              (could output remaining dist here?) | if first, LDIR=DIR
if sy then a=h*f-e*i b=d*i-g*f c=g*e-d*h end p=sqrt(r*r+s*s+t*t)                //if yawed, old left is useless, recalculate from up & new dir  (LFT=DIR x UP)
a=a*p+r b=b*p+s c=c*p+t p=sqrt(a*a+b*b+c*c) a/=p b/=p c/=p d=b*i-h*c            //weighted average of previous left & new left  LFT= [LFT | RLF]   LFT/=|LFT|
e=c*g-a*i f=a*h-b*g m=j*(h*f-e*i)+k*(d*i-g*f)+l*(g*e-d*h) o=b*d-a*e             //UP = LFT x DIR (because LHCS) | ODV=[LFT|UP|DIR]DV
n=j*(b*i-h*c)+k*(c*g-a*i)+l*(a*h-b*g) o=j*(c*e-b*f)+k*(a*f-c*d)+o*l             //ODV=[LFT|UP|DIR]DV        <LFT:M, UP:N, DIR:O>
py=sy sy=m*m>n*n q=n-(n-m)*sy p=14 m=lg*(h*f-e*i)+lh*(d*i-g*f)                  //Select yaw | pitch        ****(need to store info for cal next loop)****
b=1-2*(o<0) tt=t t=(2-4*(q<0))*(o<0)+b*q-(0.6-(0.26*b*o))*o*q goto p            //Apply map to selected
m+=li*(g*e-d*h) n=lg*(b*i-h*c)+lh*(c*g-a*i)+li*(a*h-b*g) o=c*e-b*f              //ODR=[LFT|UP|DIR]PDIR      <LFT:M, UP:N, DIR:O>
o=lg*o+lh*(a*f-c*d)+li*(b*d-a*e) q=n-(n-m)*lsy p=16+py goto 13                  //ODR=[LFT|UP|DIR]PDIR | select based on previous yaw | pitch 
goto 18+sy //m=t*t>100 wa*=1-(lp/t+1)*(lp>0)*m wb*=1-(lp/t+1)*(lp<0)*m goto 18+sy            //Correct pitch weights (if done a considerable move)
goto 18+sy //m=t*t>100 wc*=1-(ly/t+1)*(ly>0)*m wd*=1-(ly/t+1)*(ly<0)*m goto 18+sy            //Correct yaw weights   (if done a considerable move)
:ly=0 :lp=tt :FcuRotationalPitch=tt*(wa-(wa-wb)*(tp<0))*:out goto 20            //Set weighted pitch    (expects inputRange=1, centerDeadzone=0)
:ly=tt :lp=0 :FcuRotationalYaw= -tt*(wc-(wc-wd)*(ty<0))*:out goto 20            //Set weighted yaw      (expects inputRange=1, centerDeadzone=0)
goto 20-17*((:FcuRotationalPitch+:FcuRotationalYaw)==0)                         //wait for burn to finish
//--+----|----+----|----+----|----+----|----+----|----+----|----+----|


//MEMORY MAP                  sel | first?
//                                | 
//a b c d e f g h i j k l m n o p q r s t u v w x y z   tt    wa wb wc wd     lg lh li   ly lp      sy  py
//|LFT| | UP| |DIR| | DV| |ODV| | ^ |RLF| |LPO| |POS|    |    P+ P- Y+ Y-     | PDIR |               |
//                        |ODR|ctr      |                |  
//                        |    mag     tha              tha2
//                       ss    rtn
// vect3:
//  RLF - rough left vector
//  LFT - left vector
//   UP - up vector
//  DIR - direction vector
// PDIR - previous direction vector
//  ODR - == (ship oriented space)
//   DV - destination vector (real space)
//  ODV - == (ship oriented space)
//  LPO - last position         (accumulated i times)
//  POS - current position      (accumulated i times)
//
// scalar:
//  ctr - counter
//  mag - magnitude
//  tha - theta : angle to yaw/pitch
//  
//  wa  -   thrust weight P+
//  wb  -   thrust weight P-
//  wc  -   thrust weight Y+
//  wd  -   thrust weight Y-

//--+----|----+----|----+----|----+----|----+----|----+----|----+----|
x=0 y=0 z=0 i=:AUTOs x2=0 y2=0 z2=0 :CTRM=i*2 :CTR=0 goto 1+:AUTO
x-=:X y-=:Y z-=:Z x2-=:i-:x y2-=:j-:y z2-=:k-:z :CTR++ goto 2+(i--==0)
i=:AUTOs m=:DX+x/i n=:DY+y/i o=:DZ+z/i
x+=:X y+=:Y z+=:Z x2-=:i-:x y2-=:j-:y z2-=:k-:z :CTR++ goto 4+(i--==0)
a=y*z2-z*y2 b=z*x2-x*z2 c=x*y2-y*x2 v=sqrt(a^2+b^2+c^2) a/=v b/=v c/=v
v=sqrt(x^2+y^2+z^2) x/=v y/=v z/=v  v=sqrt(m^2+n^2+o^2) m/=v n/=v o/=v
i=x*c-z*a j=y*a-x*b k=z*b-y*c u=m*i*c-m*b*j+n*a*j-n*k*c+o*k*b-o*a*i
v=m*k+n*i+o*j w=m*y*j-m*i*z+n*k*z-n*x*j+o*x*i-o*k*y
xx="\nX:" yy="\nY:" zz="\nZ:" :dir=xx+x+yy+y+zz+z :up=xx+a+yy+b+zz+c
:dest=xx+u+yy+v+zz+w :left=xx+x2/:CTRM+yy+y2/:CTRM+zz+z2/:CTRM
:CTR=30 :CTRM=30 i=:AUTOi b=1-2*(u<0) ly=0 lp=0 :lwty=:wty 
:wty=60*((2-4*(v<0))*(u<0)+b*v-(0.6-(0.26*b*u))*u*v) :dwy=:lwty-:wty
:lwtp=:wtp :wtp=20*((2-4*(w<0))*(u<0)+b*w-(0.6-(0.26*b*u))*u*w)
:dwp=:lwtp-:wtp :rpw=20*:lwtp/(:dwp) :ryw=60*:lwty/(:dwy)
if abs(v)>abs(w) then ly=:wty else lp=:wtp end
if :out then :FcuRotationalYaw=ly :FcuRotationalPitch=lp end
goto 17-16*(:CTR--==0)
//--+----|----+----|----+----|----+----|----+----|----+----|----+----|

//samples for left
//100   10.177,-4.299, 0.187
//100   10.336,-11.482, 2.19
//100   10.15 ,-12.294, 0.546