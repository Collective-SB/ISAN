sy=1 r=(r-:x+:i)/2 s=(s-:y+:j)/2 t=(t-:z+:k)/2 wa=20 wb=20
p=30 x=(x+:X*p)/2 y=(y+:Y*p)/2 z=(z+:Z*p)/2    wc=60 wd=60
goto 1-((:FcuRotationalPitch+:FcuRotationalYaw)!=0)+3*:AUTO
ka=0.6 kb=0.26
u=x v=y w=z x=0 y=0 z=0 r=0 s=0 t=0 p=30 :CTRM=p :CTR=0                 //store LPO | reset acc vects
x+=:X y+=:Y z+=:Z r-=:x-:i s-=:y-:j t-=:z-:k :CTR++ goto 6+(p--==0)     //accumulate POS & RLF
lg=g lh=h li=i g=x-u h=y-v i=z-w   p=sqrt(g*g+h*h+i*i) g/=p h/=p i/=p   //LDIR=DIR DIR=(POS-LPO)/|POS-LPO|
p=30 j=:DX-x/p k=:DY-y/p l=:DZ-z/p p=sqrt(j*j+k*k+l*l) j/=p k/=p l/=p   //get & normalise DV
if sy then d=b*i-h*c e=c*g-a*i f=a*h-b*g end                            //IF lastyawed, UP = LFT x DIR
nd=s*i-h*t ne=t*g-r*i nf=r*h-s*g p=sqrt(nd*nd+ne*ne+nf*nf)              //nUP = RLF x DIR
d+=nd/p e+=ne/p f+=nf/p p=sqrt(d*d+e*e+f*f) d/=p e/=p f/=p              //Average current up & new up
a=h*f-e*i b=d*i-g*f c=g*e-d*h py=sy                                     //LFT= DIR x UP
m=j*a+k*b+l*c n=j*d+k*e+l*f o=j*g+k*h+l*i sy=m*m>n*n q=n-(n-m)*sy       //oDV=proj(DV)
b=1-2*(o<0) tt=(2-4*(q<0))*(o<0)+b*q-(ka-(kb*b*o))*o*q
m=lg*a+lh*b+li*c n=lg*d+lh*e+li*f o=lg*g+lh*h+li*i q=n-(n-m)*py         //oPDIR=proj(PDIR)
b=1-2*(o<0) t=(2-4*(q<0))*(o<0)+b*q-(ka-(kb*b*o))*o*q goto 17+py
goto 19+sy //m=t*t>100 wa*=1-(lp/t+1)*(lp>0)*m wb*=1-(lp/t+1)*(lp<0)*m goto 19+sy
goto 19+sy //m=t*t>100 wc*=1-(ly/t+1)*(ly>0)*m wd*=1-(ly/t+1)*(ly<0)*m goto 19+sy
:ly=0 :lp=tt :FcuRotationalPitch=tt*(wa-(wa-wb)*(tp<0))*:out goto 3
:ly=tt :lp=0 :FcuRotationalYaw= -tt*(wc-(wc-wd)*(ty<0))*:out goto 3


//--+----|----+----|----+----|----+----|----+----|----+----|----+----|
//MEMORY MAP                  sel | first?
//                                | 
//a b c d e f g h i j k l m n o p q r s t u v w x y z   tt    wa wb wc wd     lg lh li   ly lp      sy  py
//|LFT| | UP| |DIR| | DV| |ODV| | ^ |RLF| |LPO| |POS|    |    P+ P- Y+ Y-     | PDIR |               |
//                        |ODR|ctr      |                |  
//                        |    mag     tha              tha2
//                       ss    rtn              

//using previous x,y,z is bad because of turn error